AWSTemplateFormatVersion: '2010-09-09'
Resources:
  PicusCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: picus-ecs-cluster

  PicusTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: picus-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !ImportValue PicusECSTaskExecutionRole
      TaskRoleArn: !ImportValue PicusECSTaskRole
      ContainerDefinitions:
        - Name: picus-app
          Image: !Sub "{{resolve:ssm:/Picus/ECS/RepositoryURI}}"
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: AWS_REGION
              Value: eu-central-1
            - Name: DYNAMODB_TABLE
              Value: PicusTable

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: picus-load-balancer
      Subnets:
        - !ImportValue PicusPublicSubnet1Id
        - !ImportValue PicusPublicSubnet2Id
      SecurityGroups:
        - !ImportValue PicusLoadBalancerSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Type: application

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: picus-target-group-blue
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue PicusVPCId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: picus-target-group-green
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue PicusVPCId
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBlue
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  PicusService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: picus-service
      Cluster: !Ref PicusCluster
      DesiredCount: 2
      TaskDefinition: !Ref PicusTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue PicusECSSecurityGroup
          Subnets:
            - !ImportValue PicusPrivateSubnet1Id
            - !ImportValue PicusPrivateSubnet2Id
      LoadBalancers:
        - ContainerName: picus-app
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroupBlue
      DeploymentController:
        Type: CODE_DEPLOY
    DependsOn:
      - Listener
      - TargetGroupBlue
      - LoadBalancer

Outputs:
  ECSClusterId:
    Value: !Ref PicusCluster
    Export:
      Name: PicusECSClusterId
  TargetGroupBlueArn:
    Value: !Ref TargetGroupBlue
    Export:
      Name: PicusTargetGroupBlueArn
  TargetGroupGreenArn:
    Value: !Ref TargetGroupGreen
    Export:
      Name: PicusTargetGroupGreenArn
  LoadBalancerListenerArn:
    Value: !Ref Listener
    Export:
      Name: PicusLoadBalancerListenerArn