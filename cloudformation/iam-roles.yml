AWSTemplateFormatVersion: '2010-09-09'
Resources:
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: picus-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: picus-ecs-execution-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: picus-ecs-task-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: picus-ecs-task-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - ssm:GetParameter
                Resource: !ImportValue PicusTableArn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: picus-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: picus-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:DeleteItem
                  - lambda:InvokeFunction
                Resource: !Sub "{{resolve:ssm:/Picus/Lambda/Arn}}"

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: picus-codedeploy-service-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: picus-codedeploy-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codedeploy:*
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:ModifyTargetGroupAttributes
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                Resource: "*"

Outputs:
  PicusCodeDeployServiceRole:
    Value: !GetAtt CodeDeployServiceRole.Arn
    Export:
      Name: PicusCodeDeployServiceRole
  PicusECSTaskRole:
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: PicusECSTaskRole
  PicusECSTaskExecutionRole:
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: PicusECSTaskExecutionRole